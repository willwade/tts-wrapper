[project]
name = "py3-tts-wrapper"
dynamic = ["version"]
description = "TTS-Wrapper makes it easier to use text-to-speech APIs by providing a unified and easy-to-use interface."
authors = [
    {name = "Giulio Bottari", email = "giuliobottari@gmail.com"},
    {name = "Will Wade", email = "willwade@gmail.com"}
]
license = "MIT"
readme = "README.md"
keywords = ["tts", "text-to-speech", "speech synthesis", "polly", "sapi", "mms", "gTTS", "witai", "elevenlabs"]
requires-python = ">=3.10,<3.13"

dependencies = [
    "requests>=2.31.0",
    "sounddevice>=0.5.0",
    "soundfile>=0.12.1",
    "numpy>=1.24.3",
    "pymp3>=0.2.0",
]

[dependency-groups]
dev = [
    "pyinstrument>=4.7.3",
    "pytest>=6.2.1",
    "pytest-mock>=3.5.1",
    "filetype>=1.0.13",
    "black>=22.1.0",
    "types-requests>=2.27.31",
    "mypy>=0.971",
    "pytest-cov>=3.0.0"
]

[project.optional-dependencies]
google = ["google-cloud-texttospeech>=2.12.0"]
watson = ["ibm-watson>=8.1.0", "websocket-client", "requests>=2.31.0"]
polly = ["boto3>=1.34.137"]
microsoft = ["azure-cognitiveservices-speech>=1.15.0"]
elevenlabs = ["requests>=2.31.0", "numpy>=1.24.3"]
witai = ["requests>=2.31.0"]
systemtts = ["pyttsx3>=2.98"]
uwp = ["winrt-runtime>=2.0.1; sys_platform == 'win32'"]
sherpaonnx = ["sherpa-onnx>=1.10.17", "requests>=2.31.0", "numpy>=1.24.3"]
googletrans = ["gTTS>=2.5.2"]
edgetts = ["aiohttp>=3.8.0,<4.0.0", "typing-extensions>=4.1.0,<5.0.0"]
controlaudio = ["pyaudio>=0.2.14"]
espeak = []

[project.urls]
"Bug Tracker" = "https://github.com/willwade/tts-wrapper/issues"


[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["tts_wrapper"]

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "semver"

[project.scripts]
postinstall = "tts_wrapper.preinstall:main"

[tool.pytest.ini_options]
markers = [
    "synthetic: mark a test as synthetic"
]

[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
exclude = [
    "./examples/**/*"
]
select = [
  "AIR",    # Airflow
  "ASYNC",  # flake8-async
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "C90",    # McCabe cyclomatic complexity
  "DJ",     # flake8-django
  "DTZ",    # flake8-datetimez
  "E",      # pycodestyle
  "EM",     # flake8-errmsg
  "EXE",    # flake8-executable
  "F",      # Pyflakes
  "FA",     # flake8-future-annotations
  "FLY",    # flynt
  "FURB",   # refurb
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "INP",    # flake8-no-pep420
  "INT",    # flake8-gettext
  "ISC",    # flake8-implicit-str-concat
  "LOG",    # flake8-logging
  "NPY",    # NumPy-specific rules
  "PD",     # pandas-vet
  "PERF",   # Perflint
  "PGH",    # pygrep-hooks
  "PIE",    # flake8-pie
  "PL",     # Pylint
  "PT",     # flake8-pytest-style
  "PTH",    # flake8-use-pathlib
  "PYI",    # flake8-pyi
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF",    # Ruff-specific rules
  "SIM",    # flake8-simplify
  "SLOT",   # flake8-slots
  "T10",    # flake8-debugger
  "TCH",    # flake8-type-checking
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # pycodestyle
  "YTT",    # flake8-2020
  # "A",    # flake8-builtins
  # "ANN",  # flake8-annotations
  # "ARG",  # flake8-unused-arguments
  # "COM",  # flake8-commas
  # "CPY",  # flake8-copyright
  # "D",    # pydocstyle
  # "DOC",  # pydoclint
  # "ERA",  # eradicate
  # "FAST", # FastAPI
  # "FBT",  # flake8-boolean-trap
  # "FIX",  # flake8-fixme
  # "N",    # pep8-naming
  # "Q",    # flake8-quotes
  # "S",    # flake8-bandit
  # "SLF",  # flake8-self
  # "T20",  # flake8-print
  # "TD",   # flake8-todos
  # "TRY",  # tryceratops
]
ignore = [
  "B904",   #	raise-without-from-inside-except
  "BLE001", # blind-except
  "D212",   # Multi-line docstring summary should start at the first line
  "ISC001", # implicit-str-concat conflicts with ruff format
  "S101",   #	assert
  "ERA001"
]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str"]

